{"ast":null,"code":"import { __assign } from 'tslib';\nimport { InvariantError } from 'ts-invariant';\nimport { createFragmentMap, getFragmentFromSelection } from '../../utilities/graphql/fragments.js';\nimport { getTypenameFromResult, isField, resultKeyNameFromField, makeReference } from '../../utilities/graphql/storeUtils.js';\nimport { getOperationDefinition, getDefaultValues, getFragmentDefinitions } from '../../utilities/graphql/getFromAST.js';\nimport { shouldInclude, hasDirectives } from '../../utilities/graphql/directives.js';\nimport { cloneDeep } from '../../utilities/common/cloneDeep.js';\nimport { makeProcessedFieldsMerger } from './helpers.js';\nimport { EntityStore } from './entityStore.js';\n\nvar StoreWriter = function () {\n  function StoreWriter(config) {\n    this.config = config;\n  }\n\n  StoreWriter.prototype.writeQueryToStore = function (_a) {\n    var query = _a.query,\n        result = _a.result,\n        _b = _a.dataId,\n        dataId = _b === void 0 ? 'ROOT_QUERY' : _b,\n        _c = _a.store,\n        store = _c === void 0 ? new EntityStore.Root({\n      policies: this.config.policies\n    }) : _c,\n        variables = _a.variables;\n    var operationDefinition = getOperationDefinition(query);\n    store.retain(dataId);\n    var merger = makeProcessedFieldsMerger();\n    variables = __assign(__assign({}, getDefaultValues(operationDefinition)), variables);\n    this.processSelectionSet({\n      result: result || Object.create(null),\n      dataId: dataId,\n      selectionSet: operationDefinition.selectionSet,\n      typename: this.config.policies.rootTypenamesById[dataId],\n      context: {\n        store: store,\n        written: Object.create(null),\n        merge: function (existing, incoming) {\n          return merger.merge(existing, incoming);\n        },\n        variables: variables,\n        varString: JSON.stringify(variables),\n        fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n        toReference: store.toReference,\n        getFieldValue: store.getFieldValue\n      }\n    });\n    return store;\n  };\n\n  StoreWriter.prototype.processSelectionSet = function (_a) {\n    var _this = this;\n\n    var dataId = _a.dataId,\n        result = _a.result,\n        selectionSet = _a.selectionSet,\n        context = _a.context,\n        typename = _a.typename,\n        _b = _a.out,\n        out = _b === void 0 ? {\n      shouldApplyMerges: false\n    } : _b;\n    var _c = this.config,\n        policies = _c.policies,\n        reader = _c.reader;\n    var mergedFields = Object.create(null);\n\n    var _d = policies.identify(result, selectionSet, context.fragmentMap),\n        id = _d[0],\n        keyObject = _d[1];\n\n    dataId = dataId || id;\n\n    if (keyObject) {\n      mergedFields = context.merge(mergedFields, keyObject);\n    }\n\n    if (\"string\" === typeof dataId) {\n      var sets = context.written[dataId] || (context.written[dataId] = []);\n      var ref = makeReference(dataId);\n      if (sets.indexOf(selectionSet) >= 0) return ref;\n      sets.push(selectionSet);\n\n      if (reader && reader.isFresh(result, context.store, ref, selectionSet, context.varString)) {\n        return ref;\n      }\n    }\n\n    typename = typename || getTypenameFromResult(result, selectionSet, context.fragmentMap) || dataId && context.store.get(dataId, \"__typename\");\n\n    if (\"string\" === typeof typename) {\n      mergedFields.__typename = typename;\n    }\n\n    var workSet = new Set(selectionSet.selections);\n    workSet.forEach(function (selection) {\n      var _a;\n\n      if (!shouldInclude(selection, context.variables)) return;\n\n      if (isField(selection)) {\n        var resultFieldKey = resultKeyNameFromField(selection);\n        var value = result[resultFieldKey];\n\n        if (typeof value !== 'undefined') {\n          var storeFieldName = policies.getStoreFieldName({\n            typename: typename,\n            fieldName: selection.name.value,\n            field: selection,\n            variables: context.variables\n          });\n\n          var incomingValue = _this.processFieldValue(value, selection, context, out);\n\n          if (policies.hasMergeFunction(typename, selection.name.value)) {\n            incomingValue = {\n              __field: selection,\n              __typename: typename,\n              __value: incomingValue\n            };\n            out.shouldApplyMerges = true;\n          }\n\n          mergedFields = context.merge(mergedFields, (_a = {}, _a[storeFieldName] = incomingValue, _a));\n        } else if (policies.usingPossibleTypes && !hasDirectives([\"defer\", \"client\"], selection)) {\n          throw process.env.NODE_ENV === \"production\" ? new InvariantError(50) : new InvariantError(\"Missing field '\" + resultFieldKey + \"' in \" + JSON.stringify(result, null, 2).substring(0, 100));\n        }\n      } else {\n        var fragment = getFragmentFromSelection(selection, context.fragmentMap);\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n\n    if (\"string\" === typeof dataId) {\n      var entityRef = makeReference(dataId);\n\n      if (out.shouldApplyMerges) {\n        mergedFields = policies.applyMerges(entityRef, mergedFields, context);\n      }\n\n      context.store.merge(dataId, mergedFields);\n      return entityRef;\n    }\n\n    return mergedFields;\n  };\n\n  StoreWriter.prototype.processFieldValue = function (value, field, context, out) {\n    var _this = this;\n\n    if (!field.selectionSet || value === null) {\n      return process.env.NODE_ENV === 'production' ? value : cloneDeep(value);\n    }\n\n    if (Array.isArray(value)) {\n      return value.map(function (item) {\n        return _this.processFieldValue(item, field, context, out);\n      });\n    }\n\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context: context,\n      out: out\n    });\n  };\n\n  return StoreWriter;\n}();\n\nexport { StoreWriter };","map":{"version":3,"sources":["writeToStore.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { InvariantError } from 'ts-invariant';\nimport { createFragmentMap, getFragmentFromSelection, } from '../../utilities/graphql/fragments';\nimport { getDefaultValues, getFragmentDefinitions, getOperationDefinition, } from '../../utilities/graphql/getFromAST';\nimport { getTypenameFromResult, makeReference, isField, resultKeyNameFromField, } from '../../utilities/graphql/storeUtils';\nimport { shouldInclude, hasDirectives } from '../../utilities/graphql/directives';\nimport { cloneDeep } from '../../utilities/common/cloneDeep';\nimport { EntityStore } from './entityStore';\nimport { makeProcessedFieldsMerger } from './helpers';\n;\n;\nvar StoreWriter = (function () {\n    function StoreWriter(config) {\n        this.config = config;\n    }\n    StoreWriter.prototype.writeQueryToStore = function (_a) {\n        var query = _a.query, result = _a.result, _b = _a.dataId, dataId = _b === void 0 ? 'ROOT_QUERY' : _b, _c = _a.store, store = _c === void 0 ? new EntityStore.Root({\n            policies: this.config.policies,\n        }) : _c, variables = _a.variables;\n        var operationDefinition = getOperationDefinition(query);\n        store.retain(dataId);\n        var merger = makeProcessedFieldsMerger();\n        variables = __assign(__assign({}, getDefaultValues(operationDefinition)), variables);\n        this.processSelectionSet({\n            result: result || Object.create(null),\n            dataId: dataId,\n            selectionSet: operationDefinition.selectionSet,\n            typename: this.config.policies.rootTypenamesById[dataId],\n            context: {\n                store: store,\n                written: Object.create(null),\n                merge: function (existing, incoming) {\n                    return merger.merge(existing, incoming);\n                },\n                variables: variables,\n                varString: JSON.stringify(variables),\n                fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n                toReference: store.toReference,\n                getFieldValue: store.getFieldValue,\n            },\n        });\n        return store;\n    };\n    StoreWriter.prototype.processSelectionSet = function (_a) {\n        var _this = this;\n        var dataId = _a.dataId, result = _a.result, selectionSet = _a.selectionSet, context = _a.context, typename = _a.typename, _b = _a.out, out = _b === void 0 ? {\n            shouldApplyMerges: false,\n        } : _b;\n        var _c = this.config, policies = _c.policies, reader = _c.reader;\n        var mergedFields = Object.create(null);\n        var _d = policies.identify(result, selectionSet, context.fragmentMap), id = _d[0], keyObject = _d[1];\n        dataId = dataId || id;\n        if (keyObject) {\n            mergedFields = context.merge(mergedFields, keyObject);\n        }\n        if (\"string\" === typeof dataId) {\n            var sets = context.written[dataId] || (context.written[dataId] = []);\n            var ref = makeReference(dataId);\n            if (sets.indexOf(selectionSet) >= 0)\n                return ref;\n            sets.push(selectionSet);\n            if (reader && reader.isFresh(result, context.store, ref, selectionSet, context.varString)) {\n                return ref;\n            }\n        }\n        typename = typename ||\n            getTypenameFromResult(result, selectionSet, context.fragmentMap) ||\n            (dataId && context.store.get(dataId, \"__typename\"));\n        if (\"string\" === typeof typename) {\n            mergedFields.__typename = typename;\n        }\n        var workSet = new Set(selectionSet.selections);\n        workSet.forEach(function (selection) {\n            var _a;\n            if (!shouldInclude(selection, context.variables))\n                return;\n            if (isField(selection)) {\n                var resultFieldKey = resultKeyNameFromField(selection);\n                var value = result[resultFieldKey];\n                if (typeof value !== 'undefined') {\n                    var storeFieldName = policies.getStoreFieldName({\n                        typename: typename,\n                        fieldName: selection.name.value,\n                        field: selection,\n                        variables: context.variables,\n                    });\n                    var incomingValue = _this.processFieldValue(value, selection, context, out);\n                    if (policies.hasMergeFunction(typename, selection.name.value)) {\n                        incomingValue = {\n                            __field: selection,\n                            __typename: typename,\n                            __value: incomingValue,\n                        };\n                        out.shouldApplyMerges = true;\n                    }\n                    mergedFields = context.merge(mergedFields, (_a = {},\n                        _a[storeFieldName] = incomingValue,\n                        _a));\n                }\n                else if (policies.usingPossibleTypes &&\n                    !hasDirectives([\"defer\", \"client\"], selection)) {\n                    throw new InvariantError(\"Missing field '\" + resultFieldKey + \"' in \" + JSON.stringify(result, null, 2).substring(0, 100));\n                }\n            }\n            else {\n                var fragment = getFragmentFromSelection(selection, context.fragmentMap);\n                if (fragment && policies.fragmentMatches(fragment, typename)) {\n                    fragment.selectionSet.selections.forEach(workSet.add, workSet);\n                }\n            }\n        });\n        if (\"string\" === typeof dataId) {\n            var entityRef = makeReference(dataId);\n            if (out.shouldApplyMerges) {\n                mergedFields = policies.applyMerges(entityRef, mergedFields, context);\n            }\n            context.store.merge(dataId, mergedFields);\n            return entityRef;\n        }\n        return mergedFields;\n    };\n    StoreWriter.prototype.processFieldValue = function (value, field, context, out) {\n        var _this = this;\n        if (!field.selectionSet || value === null) {\n            return process.env.NODE_ENV === 'production' ? value : cloneDeep(value);\n        }\n        if (Array.isArray(value)) {\n            return value.map(function (item) { return _this.processFieldValue(item, field, context, out); });\n        }\n        return this.processSelectionSet({\n            result: value,\n            selectionSet: field.selectionSet,\n            context: context,\n            out: out,\n        });\n    };\n    return StoreWriter;\n}());\nexport { StoreWriter };\n//# sourceMappingURL=writeToStore.js.map"]},"metadata":{},"sourceType":"module"}