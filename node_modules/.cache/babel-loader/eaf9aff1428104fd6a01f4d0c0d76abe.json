{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devsi\\\\Documents\\\\Reacts\\\\contact\\\\contact-app\\\\src\\\\components\\\\AddContact.js\";\nimport React, { useState } from 'react';\nimport { useMutation, gql } from \"@apollo/client\";\nimport { Form, Input, Button } from 'antd';\nconst ADD_CONTACT = gql`\nmutation MyMutation {\n    insertContact(email: \"tt\", fname: \"tt\", lname: \"tt\", twitter: \"fearcool\") {\n      affected_rows\n    }\n  }\n`;\n\nconst AddContact = () => {\n  const [setInputVal] = useState(\"\");\n  const [addContact] = useMutation(ADD_CONTACT);\n  const [form] = Form.useForm();\n  const layout = {\n    labelCol: {\n      span: 8\n    },\n    wrapperCol: {\n      span: 16\n    }\n  };\n  const tailLayout = {\n    wrapperCol: {\n      offset: 8,\n      span: 16\n    }\n  };\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const onFinish = values => {\n    addContact({\n      variables: {\n        fname: values.user.fname,\n        lname: values.user.lname,\n        email: values.user.email\n      }\n    }).then(() => setInputVal(\"\")).catch(e => {\n      setInputVal(e.message);\n      onReset();\n    });\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  return /*#__PURE__*/React.createElement(Form, Object.assign({}, layout, {\n    name: \"basic\",\n    form: form,\n    onFinish: onFinish,\n    onFinishFailed: onFinishFailed,\n    initialValues: {\n      remember: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"First Name\",\n    name: ['user', 'fname'],\n    key: 1,\n    rules: [{\n      required: true,\n      message: 'Please input your first name!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Contact First Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Last Name\",\n    name: ['user', 'lname'],\n    rules: [{\n      required: true,\n      message: 'Please input your last name!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Contact Last Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: ['user', 'email'],\n    label: \"Email\",\n    rules: [{\n      type: 'email',\n      required: true,\n      message: 'Please input your last email!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Twitter\",\n    name: ['user', 'twitter'],\n    key: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, tailLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"Submit\")));\n};\n\nexport default AddContact;","map":{"version":3,"sources":["C:/Users/devsi/Documents/Reacts/contact/contact-app/src/components/AddContact.js"],"names":["React","useState","useMutation","gql","Form","Input","Button","ADD_CONTACT","AddContact","setInputVal","addContact","form","useForm","layout","labelCol","span","wrapperCol","tailLayout","offset","onReset","resetFields","onFinish","values","variables","fname","user","lname","email","then","catch","e","message","onFinishFailed","errorInfo","console","log","remember","required","type"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport {useMutation, gql } from \"@apollo/client\";\r\nimport { Form, Input, Button } from 'antd';\r\n\r\nconst ADD_CONTACT = gql`\r\nmutation MyMutation {\r\n    insertContact(email: \"tt\", fname: \"tt\", lname: \"tt\", twitter: \"fearcool\") {\r\n      affected_rows\r\n    }\r\n  }\r\n`;\r\n\r\nconst AddContact = () => {\r\n    const [setInputVal] = useState(\"\");\r\n    const [addContact] = useMutation(ADD_CONTACT);\r\n    const [form] = Form.useForm();\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n      };\r\n      const tailLayout = {\r\n        wrapperCol: { offset: 8, span: 16 },\r\n      };\r\n     const onReset = () => {\r\n        form.resetFields();\r\n     };\r\n    const onFinish = values => {\r\n        addContact({ variables: {fname: values.user.fname, lname: values.user.lname, email: values.user.email }})\r\n        .then(() => setInputVal(\"\"))\r\n            .catch((e) => {\r\n              setInputVal(e.message);\r\n               onReset();\r\n            });\r\n    };\r\n    const onFinishFailed = errorInfo => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n      \r\n    return (\r\n    <Form\r\n       {...layout}\r\n       name=\"basic\"\r\n       form={form}\r\n       onFinish={onFinish}\r\n       onFinishFailed={onFinishFailed}\r\n       initialValues={{ remember: true }}\r\n     >\r\n       <Form.Item\r\n         label=\"First Name\"\r\n         name={['user', 'fname']} \r\n         key={1}\r\n         rules={[{ required: true, message: 'Please input your first name!' }]}\r\n       ><Input placeholder=\"Contact First Name\"/>\r\n        </Form.Item>\r\n       <Form.Item \r\n       label=\"Last Name\"\r\n       name={['user', 'lname']}\r\n       rules={[{ required: true, message: 'Please input your last name!' }]}>\r\n        <Input placeholder=\"Contact Last Name\"/>\r\n       </Form.Item>\r\n       <Form.Item \r\n       name={['user', 'email']} \r\n       label=\"Email\" \r\n       rules={[{ type: 'email',required: true, message: 'Please input your last email!' }]}>\r\n        <Input />\r\n       </Form.Item>\r\n        <Form.Item\r\n         label=\"Twitter\"\r\n         name={['user', 'twitter']} \r\n         key={4}\r\n       ><Input />\r\n        </Form.Item>\r\n        <Form.Item {...tailLayout}>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form.Item>\r\n     </Form>\r\n    )\r\n};\r\n\r\n\r\nexport default AddContact;"]},"metadata":{},"sourceType":"module"}