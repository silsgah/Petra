{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devsi\\\\Documents\\\\Reacts\\\\contact\\\\contact-app\\\\src\\\\components\\\\Details.js\";\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { Form, Input, Button } from 'antd';\nconst Detail = gql`\nquery Contact($id: Int!) {\n    contacts_by_pk(id: $id) {\n      email\n      fname\n      id\n      lname\n      twitter\n    }\n  }\n`;\n\nconst Details = ({\n  match: {\n    params: {\n      id\n    }\n  }\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(Detail, {\n    variables: {\n      id\n    }\n  });\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 24\n    }\n  }, \"fetching data...\");\n  if (error) return console.error();\n  const [form] = Form.useForm();\n  const layout = {\n    labelCol: {\n      span: 8\n    },\n    wrapperCol: {\n      span: 16\n    }\n  };\n  const tailLayout = {\n    wrapperCol: {\n      offset: 8,\n      span: 16\n    }\n  };\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const {\n    email,\n    fname,\n    lname,\n    twitter\n  } = data.contacts_by_pk;\n  return /*#__PURE__*/React.createElement(Form, Object.assign({}, layout, {\n    name: \"basic\",\n    form: form,\n    onFinish: onFinish,\n    onFinishFailed: onFinishFailed,\n    initialValues: {\n      remember: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"First Name\",\n    name: ['user', 'fname'],\n    key: 1,\n    rules: [{\n      required: true,\n      message: 'Please input your first name!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Contact First Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 10\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Last Name\",\n    name: ['user', 'lname'],\n    rules: [{\n      required: true,\n      message: 'Please input your last name!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Contact Last Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 10\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: ['user', 'email'],\n    label: \"Email\",\n    rules: [{\n      type: 'email',\n      required: true,\n      message: 'Please input your last email!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 10\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Twitter\",\n    name: ['user', 'twitter'],\n    key: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 10\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, tailLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 10\n    }\n  }, \"Submit\")));\n};\n\nexport default Details;","map":{"version":3,"sources":["C:/Users/devsi/Documents/Reacts/contact/contact-app/src/components/Details.js"],"names":["React","useQuery","gql","Form","Input","Button","Detail","Details","match","params","id","loading","error","data","variables","console","form","useForm","layout","labelCol","span","wrapperCol","tailLayout","offset","onReset","resetFields","email","fname","lname","twitter","contacts_by_pk","onFinish","onFinishFailed","remember","required","message","type"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { Form, Input, Button } from 'antd';\r\n\r\nconst Detail = gql`\r\nquery Contact($id: Int!) {\r\n    contacts_by_pk(id: $id) {\r\n      email\r\n      fname\r\n      id\r\n      lname\r\n      twitter\r\n    }\r\n  }\r\n`;\r\nconst Details = ({\r\n    match:{\r\n        params: { id },\r\n    },\r\n}) => {\r\n    const { loading, error, data } = useQuery(Detail, { variables: {id} });\r\n    if(loading) return <p>fetching data...</p>\r\n    if(error) return console.error();\r\n    const [form] = Form.useForm();\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n      };\r\n      const tailLayout = {\r\n        wrapperCol: { offset: 8, span: 16 },\r\n      };\r\n     const onReset = () => {\r\n        form.resetFields();\r\n     };\r\n    const { email, fname, lname, twitter } = data.contacts_by_pk;\r\n    return (\r\n        <Form\r\n        {...layout}\r\n        name=\"basic\"\r\n        form={form}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n        initialValues={{ remember: true }}\r\n      >\r\n        <Form.Item\r\n          label=\"First Name\"\r\n          name={['user', 'fname']} \r\n          key={1}\r\n          rules={[{ required: true, message: 'Please input your first name!' }]}\r\n        ><Input placeholder=\"Contact First Name\"/>\r\n         </Form.Item>\r\n        <Form.Item \r\n        label=\"Last Name\"\r\n        name={['user', 'lname']}\r\n        rules={[{ required: true, message: 'Please input your last name!' }]}>\r\n         <Input placeholder=\"Contact Last Name\"/>\r\n        </Form.Item>\r\n        <Form.Item \r\n        name={['user', 'email']} \r\n        label=\"Email\" \r\n        rules={[{ type: 'email',required: true, message: 'Please input your last email!' }]}>\r\n         <Input />\r\n        </Form.Item>\r\n         <Form.Item\r\n          label=\"Twitter\"\r\n          name={['user', 'twitter']} \r\n          key={4}\r\n        ><Input />\r\n         </Form.Item>\r\n         <Form.Item {...tailLayout}>\r\n         <Button type=\"primary\" htmlType=\"submit\">\r\n           Submit\r\n         </Button>\r\n       </Form.Item>\r\n      </Form>\r\n    )\r\n};\r\n\r\nexport default Details;"]},"metadata":{},"sourceType":"module"}