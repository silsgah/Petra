{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devsi\\\\Documents\\\\Reacts\\\\contact\\\\contact-app\\\\src\\\\components\\\\Planets.js\";\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { List, Typography } from 'antd';\nconst CONTACTS = gql`\n{\n    contacts {\n      email\n      fname\n      id\n      lname\n      twitter\n    }\n}\n`;\nexport default function Planets() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(CONTACTS);\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 24\n    }\n  }, \"loading...\");\n  if (error) return console.error();\n  return data.contacts.map(({\n    id,\n    email,\n    fname,\n    lname,\n    twitter\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    key: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, email, \" | \", fname), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/devsi/Documents/Reacts/contact/contact-app/src/components/Planets.js"],"names":["React","useQuery","gql","List","Typography","CONTACTS","Planets","loading","error","data","console","contacts","map","id","email","fname","lname","twitter"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,MAAjC;AAEA,MAAMC,QAAQ,GAAGH,GAAI;;;;;;;;;;CAArB;AAYA,eAAe,SAASI,OAAT,GAAkB;AAC7B,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAA0BR,QAAQ,CAACI,QAAD,CAAxC;AACA,MAAGE,OAAH,EAAY,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACZ,MAAGC,KAAH,EAAU,OAAOE,OAAO,CAACF,KAAR,EAAP;AACV,SAAOC,IAAI,CAACE,QAAL,CAAcC,GAAd,CAAkB,CAAC;AAACC,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA,KAAnB;AAA0BC,IAAAA;AAA1B,GAAD,kBACzB;AAAK,IAAA,GAAG,EAAEJ,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCC,KADD,SACWC,KADX,CADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADO,CAAP;AASH","sourcesContent":["import React from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { List, Typography } from 'antd';\r\n\r\nconst CONTACTS = gql`\r\n{\r\n    contacts {\r\n      email\r\n      fname\r\n      id\r\n      lname\r\n      twitter\r\n    }\r\n}\r\n`;\r\n\r\nexport default function Planets(){\r\n    const {loading, error, data } = useQuery(CONTACTS);\r\n    if(loading) return <p>loading...</p>\r\n    if(error) return console.error()\r\n    return data.contacts.map(({id, email, fname, lname, twitter }) => (\r\n    <div key={id}>\r\n        <p>\r\n        {email} | {fname}\r\n        </p>\r\n        <div>\r\n  </div>\r\n    </div>\r\n    ));\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}