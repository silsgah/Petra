{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devsi\\\\Documents\\\\Reacts\\\\contact\\\\contact-app\\\\src\\\\components\\\\Details.js\";\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { List, Avatar, Skeleton } from 'antd';\nconst Detail = gql`\nquery Contact($id: Int!) {\n    contacts_by_pk(id: $id) {\n      email\n      fname\n      id\n      lname\n      twitter\n    }\n  }\n`;\n\nconst detailId = ({\n  match: {\n    params: {\n      id\n    }\n  }\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(DETAIL, {\n    variables: {\n      id\n    }\n  });\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 24\n    }\n  }, \"fetching data...\");\n  if (error) return console.error();\n  const {\n    email,\n    fname,\n    lname,\n    twitter\n  } = data.contacts_by_pk;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, \" \", email, \" - \", fname, \" - \", twitter, \" - \", lname, \" \"));\n};","map":{"version":3,"sources":["C:/Users/devsi/Documents/Reacts/contact/contact-app/src/components/Details.js"],"names":["React","useQuery","gql","List","Avatar","Skeleton","Detail","detailId","match","params","id","loading","error","data","DETAIL","variables","console","email","fname","lname","twitter","contacts_by_pk"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,QAAvB,QAAuC,MAAvC;AAEA,MAAMC,MAAM,GAAGJ,GAAI;;;;;;;;;;CAAnB;;AAYA,MAAMK,QAAQ,GAAG,CAAC;AACdC,EAAAA,KAAK,EAAC;AACFC,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AADN;AADQ,CAAD,KAIX;AACF,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BZ,QAAQ,CAACa,MAAD,EAAS;AAAEC,IAAAA,SAAS,EAAE;AAACL,MAAAA;AAAD;AAAb,GAAT,CAAzC;AAEA,MAAGC,OAAH,EAAY,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACZ,MAAGC,KAAH,EAAU,OAAOI,OAAO,CAACJ,KAAR,EAAP;AAEV,QAAM;AAAEK,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB,MAAmCP,IAAI,CAACQ,cAA9C;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAMJ,KAAN,SAAgBC,KAAhB,SAA0BE,OAA1B,SAAsCD,KAAtC,MADJ,CADJ;AAMH,CAlBD","sourcesContent":["import React from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { List, Avatar, Skeleton } from 'antd';\r\n\r\nconst Detail = gql`\r\nquery Contact($id: Int!) {\r\n    contacts_by_pk(id: $id) {\r\n      email\r\n      fname\r\n      id\r\n      lname\r\n      twitter\r\n    }\r\n  }\r\n`;\r\n\r\nconst detailId = ({\r\n    match:{\r\n        params: { id },\r\n    },\r\n}) => {\r\n    const { loading, error, data } = useQuery(DETAIL, { variables: {id} });\r\n\r\n    if(loading) return <p>fetching data...</p>\r\n    if(error) return console.error();\r\n\r\n    const { email, fname, lname, twitter } = data.contacts_by_pk;\r\n\r\n    return (\r\n        <div>\r\n            <h3> {email} - {fname} - {twitter} - {lname} </h3>\r\n\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}